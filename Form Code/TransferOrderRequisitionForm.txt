[Form]
public class DIN_TransferOrderRequisitionForm extends FormRun
{
    DirTransOrderRefEDT dirTransOrderRefEDTGlobal;
    str nextReferenceNumberPreview; // New variable to hold the preview

    public void init()
    {
        super();

        // Fetch and calculate the next number for preview
        this.updateNumberSequencePreview();
    }

    private void updateNumberSequencePreview()
    {
        str lastReferenceNumber = '';
        int lastReferenceNumberInt = 0;
        str prefix = "DTOR-";
        DIN_TransferOrderRequisitionTable lastRecord;

        // Get the last used number from the table
        select maxof(DIN_DirectorTransferOrderReferenceNumber) from lastRecord;

        if (lastRecord && lastRecord.DIN_DirectorTransferOrderReferenceNumber)
        {
            lastReferenceNumber = lastRecord.DIN_DirectorTransferOrderReferenceNumber;

            if (strStartsWith(lastReferenceNumber, prefix))
            {
                str numericPart = subStr(lastReferenceNumber, strLen(prefix) + 1, strLen(lastReferenceNumber) - strLen(prefix));
                try
                {
                    lastReferenceNumberInt = str2Int(numericPart);
                }
                catch
                {
                    info("Invalid Reference Number format");
                    lastReferenceNumberInt = 0; // Reset to 0 instead of returning
                }
            }
        }

        // Increment the reference number
        lastReferenceNumberInt += 1;
        str paddedNumber = int2Str(lastReferenceNumberInt);
        int paddedLength = 5 - strLen(paddedNumber); // Adjust padding length based on format

        while (paddedLength > 0)
        {
            paddedNumber = "0" + paddedNumber;
            paddedLength--;
        }

        // Set the preview number
        nextReferenceNumberPreview = prefix + paddedNumber;

        // Display the preview in the form field temporarily
        FormDataSource ds = this.dataSource(formDataSourceStr(DIN_TransferOrderRequisitionForm, DIN_TransferOrderRequisitionTmpTable));
        if (ds && ds.cursor())
        {
            DIN_TransferOrderRequisitionTmpTable tmpTable = ds.cursor();
            tmpTable.DIN_DirectorTransferOrderReferenceNumber = nextReferenceNumberPreview;
            ds.refresh();   // Refresh the datasource to show the value in the UI
        }

        // Also show it in an info message
        //if (nextReferenceNumberPreview)
        //{
        //    info(strFmt("Next Transfer Order Reference Number: %1", nextReferenceNumberPreview));
        //}
    }

    [DataSource]
    class DIN_TransferOrderRequisitionTmpTable
    {
        public void create(boolean _append = false)
        {
            DIN_TransferOrderRequisitionTmpTable_ds.research();
            super(_append);

            // Set the preview value in the new record
            if (element.nextReferenceNumberPreview)
            {
                DIN_TransferOrderRequisitionTmpTable.DIN_DirectorTransferOrderReferenceNumber = element.nextReferenceNumberPreview;
            }
        }

    }

    [Control("CommandButton")]
    class FormCommandButtonControl1
    {
        public void clicked()
        {
            super();
            new MenuFunction(menuItemDisplayStr(DIN_TransferOrderRequisitionDisplayMenuItem), MenuItemType::Display).run();
        }

    }

    [Control("Button")]
    class PostButton
    {
        public void clicked()
        {
            super();

            FormDataSource ds;
            boolean success = true;
            ds = this.formRun().dataSource(formDataSourceStr(DIN_TransferOrderRequisitionForm, DIN_TransferOrderRequisitionTmpTable));

            if (!ds.cursor())
            {
                error("No records to post.");
                return;
            }

            ds.first();
            while (ds.cursor())
            {
                DIN_TransferOrderRequisitionTmpTable dinTransferOrderRequisitionTmpTable = ds.cursor();
                
                if (!dinTransferOrderRequisitionTmpTable.DIN_Store ||
                    !dinTransferOrderRequisitionTmpTable.DIN_DeliveredTo ||
                    !dinTransferOrderRequisitionTmpTable.DIN_AccountFor ||
                    !dinTransferOrderRequisitionTmpTable.DIN_DirectorName)
                {
                    error("Please fill in Store, Delivered To, Account For, and Director Name before posting.");
                    success = false;
                    break;
                }

                if (!dirTransOrderRefEDTGlobal)
                {
                    NumberSequenceReference numberSequenceReference;
                    numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(DirTransOrderRefEDT));

                    if (numberSequenceReference)
                    {
                        dirTransOrderRefEDTGlobal = NumberSeq::newGetNum(numberSequenceReference).num();
                        dinTransferOrderRequisitionTmpTable.DIN_DirectorTransferOrderReferenceNumber = dirTransOrderRefEDTGlobal;
                        ds.write(); // Write the actual number sequence value
                    }
                }

                DIN_TransferOrderRequisitionTable dinTransferOrderRequisitionTable;
                dinTransferOrderRequisitionTable.clear();
                dinTransferOrderRequisitionTable.DIN_Store = dinTransferOrderRequisitionTmpTable.DIN_Store;
                dinTransferOrderRequisitionTable.DIN_DeliveredTo = dinTransferOrderRequisitionTmpTable.DIN_DeliveredTo;
                dinTransferOrderRequisitionTable.DIN_Item = dinTransferOrderRequisitionTmpTable.DIN_Item;
                dinTransferOrderRequisitionTable.DIN_Color = dinTransferOrderRequisitionTmpTable.DIN_Color;
                dinTransferOrderRequisitionTable.DIN_Size = dinTransferOrderRequisitionTmpTable.DIN_Size;
                dinTransferOrderRequisitionTable.DIN_Qty = dinTransferOrderRequisitionTmpTable.DIN_Qty;
                dinTransferOrderRequisitionTable.DIN_BarCode = dinTransferOrderRequisitionTmpTable.DIN_BarCode;
                dinTransferOrderRequisitionTable.DIN_AccountFor = dinTransferOrderRequisitionTmpTable.DIN_AccountFor;
                dinTransferOrderRequisitionTable.DIN_DirectorName = dinTransferOrderRequisitionTmpTable.DIN_DirectorName;
                dinTransferOrderRequisitionTable.DIN_DirectorTransferOrderReferenceNumber = dirTransOrderRefEDTGlobal;

                dinTransferOrderRequisitionTable.insert();
                dinTransferOrderRequisitionTmpTable.delete();
                dinTransferOrderRequisitionTmpTable.clear();

                ds.next();
            }

            if (success)
            {
                new MenuFunction(menuItemDisplayStr(DIN_TransferOrderRequisitionDisplayMenuItem), MenuItemType::Display).run();
                element.updateNumberSequencePreview(); // Update preview after posting
            }
        }

    }

    [Control("Button")]
    class FormButtonControl1
    {
        public void clicked()
        {
            FormDataSource ds;
            str StoreName, Deliveredto, DirRefNo;
            EnumId accountfor, directorname;
            str BarCode, Size, Color;
            Qty Qty;

            super();
  
            ds = this.formRun().dataSource(formDataSourceStr(DIN_TransferOrderRequisitionForm, DIN_TransferOrderRequisitionTmpTable));
    
            if (ds.cursor())
            {
                StoreName = ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_Store));
                Deliveredto = ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_DeliveredTo));
                accountfor = ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_AccountFor));
                directorname = ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_DirectorName));
                DirRefNo = ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_DirectorTransferOrderReferenceNumber));

                BarCode = ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_BarCode));
                Size = ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_Size));
                Color = ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_Color));
                Qty = ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_Qty));
            }
            else
            {
                error("No record selected in the temporary table.");
                return;
            }

            if (!StoreName || !directorname || !Deliveredto || !accountfor)
            {
                error("Please fill in Director Name, Delivered To, and Account For before adding a new line.");
                return;
            }

            if (BarCode == '' || Size == '' || Color == '' || Qty == 0.0)
            {
                error("Please fill in Barcode, Size, Color, and Quantity before adding another line.");
                return;
            }

            ds.create(true);
            ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_Store)) = StoreName;
            ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_DeliveredTo)) = Deliveredto;
            ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_AccountFor)) = accountfor;
            ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_DirectorName)) = directorname;
            ds.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_DirectorTransferOrderReferenceNumber)) = DirRefNo;
        }

    }

    [Control("String")]
    class DIN_TransferOrderRequisitionTmpTable_DIN_BarCode
    {
        public boolean modified()
        {
            boolean ret;
            super();

            FormStringControl barcodeIdControl = this as FormStringControl;
            FormDataSource transferRequisitionDS = this.formRun().dataSource(formDataSourceStr(DIN_TransferOrderRequisitionForm, DIN_TransferOrderRequisitionTmpTable));

            INVENTITEMBARCODE InventItemBarcode;
            INVENTDIM InventDim;

            str barcodeId = barcodeIdControl.valueStr();

            if (barcodeId)
            {
                select firstonly InventItemBarcode
                where InventItemBarcode.ITEMBARCODE == barcodeId
                join firstonly InventDim
                where InventDim.INVENTDIMID == InventItemBarcode.INVENTDIMID;

                if (InventItemBarcode)
                {
                    transferRequisitionDS.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_Item)) = InventItemBarcode ? InventItemBarcode.itemId : "";
                    transferRequisitionDS.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_Size)) = InventDim ? InventDim.INVENTSIZEID : "";
                    transferRequisitionDS.cursor().(fieldNum(DIN_TransferOrderRequisitionTmpTable, DIN_Color)) = InventDim ? InventDim.INVENTCOLORID : "";
                }
                else
                {
                    warning("Barcode not found in the system.");
                }
            }
            else
            {
                warning("Please enter a valid barcode.");
            }

            ret = super();
            return ret;
        }

    }

}